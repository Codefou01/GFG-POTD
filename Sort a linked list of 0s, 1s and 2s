// Java : 

// 1. Array

class Solution {
    public Node segregate(Node head) {
        
        int[] count = new int[3];
        Node temp = head;
        
        while (temp != null) {
            count[temp.data]++;
            temp = temp.next;
        }
        
        temp = head;
        
        for (int i = 0; i < 3; i++) {
            while (count[i]-- > 0) {
                temp.data = i;
                temp = temp.next;
            }
        }
        
        return head;
    }
}


// 3 pointer : 

class Solution {
    public Node segregate(Node head) {
        if (head == null || head.next == null) return head;

        Node zeroDummy = new Node(0), oneDummy = new Node(0), twoDummy = new Node(0);
        Node zero = zeroDummy, one = oneDummy, two = twoDummy;

        Node curr = head;
        
        while (curr != null) {
            
            if (curr.data == 0) {
                
                zero.next = curr;
                zero = zero.next;
                
            } else if (curr.data == 1) {
                
                one.next = curr;
                one = one.next;
                
            } else { 
                
                two.next = curr;
                two = two.next;
                
            }
            
            curr = curr.next;
        }

        zero.next = (oneDummy.next != null) ? oneDummy.next : twoDummy.next;
        one.next = twoDummy.next; 
        two.next = null;         

        return zeroDummy.next;
    }
}



// C++ Code : 

1. Array : 

struct Node {
    int data;
    Node* next;
    Node(int x) : data(x), next(nullptr) {}
};

class Solution {
public:
    Node* segregate(Node* head) {
        if (head == nullptr) return head;
        int count[3] = {0, 0, 0};

        Node* temp = head;
        while (temp != nullptr) {
            count[temp->data]++;
            temp = temp->next;
        }

        temp = head;
        for (int i = 0; i < 3; i++) {
            while (count[i]-- > 0) {
                temp->data = i;
                temp = temp->next;
            }
        }
        return head;
    }
};


// 2. 3 Poinetr : 

struct Node {
    int data;
    Node* next;
    Node(int x) : data(x), next(nullptr) {}
};

class Solution {
public:
    Node* segregate(Node* head) {
        if (head == nullptr || head->next == nullptr) return head;

        Node* zeroDummy = new Node(0);
        Node* oneDummy  = new Node(0);
        Node* twoDummy  = new Node(0);

        Node* zero = zeroDummy;
        Node* one  = oneDummy;
        Node* two  = twoDummy;

        Node* curr = head;
        while (curr != nullptr) {
            if (curr->data == 0) {
                zero->next = curr;
                zero = zero->next;
            } else if (curr->data == 1) {
                one->next = curr;
                one = one->next;
            } else { 
                two->next = curr;
                two = two->next;
            }
            curr = curr->next;
        }

        zero->next = (oneDummy->next != nullptr) ? oneDummy->next : twoDummy->next;
        one->next  = twoDummy->next;
        two->next  = nullptr;

        Node* newHead = zeroDummy->next;

        delete zeroDummy;
        delete oneDummy;
        delete twoDummy;

        return newHead;
    }
};

