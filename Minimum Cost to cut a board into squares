Java : 

class Solution {
    public static int minCost(int n, int m, int[] x, int[] y) {
        // code here
        Arrays.sort(x);
        Arrays.sort(y);
        
        int i=n-2, j=m-2;
        int xcount = 1, ycount = 1;
        int res = 0;
        
        while(i>=0 && j>=0){
            if(y[i] > x[j]){
                res += y[i] * xcount;
                ycount++;
                i--;
            }else {
                res += x[j] * ycount;
                xcount++;
                j--;
            }
        }
        
        while(i >= 0){
            res += y[i] * xcount;
            ycount++;
            i--;
        }
        
        while(j >= 0){
            res += x[j] * ycount;
            xcount++;
            j--;
        }
        
        return res;
    }
}




// C++ Code :

class Solution {
public:
    static int minCost(int n, int m, vector<int>& x, vector<int>& y) {
        sort(x.begin(), x.end());
        sort(y.begin(), y.end());

        int i = m - 2;
        int j = n - 2;
        int xcount = 1, ycount = 1;
        int res = 0;

        while(i >= 0 && j >= 0) {
            if(x[i] > y[j]) {
                res += x[i] * ycount;
                xcount++;
                i--;
            } else {
                res += y[j] * xcount;
                ycount++;
                j--;
            }
        }

        while(i >= 0) {
            res += x[i] * ycount;
            xcount++;
            i--;
        }

        while(j >= 0) {
            res += y[j] * xcount;
            ycount++;
            j--;
        }

        return res;
    }
};
