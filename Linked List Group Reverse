// Java Code 

// Recursion : 

class Solution {
    public Node reverseKGroup(Node head, int k) {
        Node curr = head;
        for (int i = 0; i < k; i++) {
            if (curr == null) return reverse(head, null); 
            curr = curr.next;
        }
        Node newHead = reverse(head, curr);
        head.next = reverseKGroup(curr, k);
        return newHead;
    }

    private Node reverse(Node head, Node stop) {
        Node prev = stop;
        while (head != stop) {
            Node next = head.next;
            head.next = prev;
            prev = head;
            head = next;
        }
        return prev;
    }
}


// Iterative : 

class Solution {
    public Node reverseKGroup(Node head, int k) {
        if (k <= 1) return head;

        Node dummy = new Node(0);
        dummy.next = head;
        Node prev = dummy;

        while (true) {
            Node end = prev;
            int count = 0;
            while (count < k && end.next != null) {
                end = end.next;
                count++;
            }

            if (count == 0) break;

            Node start = prev.next;
            Node next = end.next;

            reverse(start, next);

            prev.next = end;
            start.next = next;

            prev = start;

            if (count < k) break;
        }
        
        return dummy.next;
    }

    private void reverse(Node head, Node stop) {
        Node prev = stop;
        while (head != stop) {
            Node nxt = head.next;
            head.next = prev;
            prev = head;
            head = nxt;
        }
    }
}




// C++ Code : 

// Recursion 


class Solution {
  public:
     Node* reverseKGroup(Node* head, int k) {
        Node* curr = head;
     
        for (int i = 0; i < k; i++) {
            if (curr == nullptr) 
                return reverse(head, nullptr);
            curr = curr->next;
        }

        Node* newHead = reverse(head, curr);
        head->next = reverseKGroup(curr, k);
        return newHead;
    }

private:
    Node* reverse(Node* head, Node* stop) {
        Node* prev = stop;
        while (head != stop) {
            Node* next = head->next;
            head->next = prev;
            prev = head;
            head = next;
        }
        return prev;
    }
};


// Interative :

class Solution {
public:
    Node* reverseKGroup(Node* head, int k) {
        if (k <= 1) return head;

        Node dummy(0);
        dummy.next = head;
        Node* prev = &dummy;

        while (true) {
            
            Node* end = prev;
            int count = 0;
            
            while (count < k && end->next != nullptr) {
                end = end->next;
                count++;
            }

            if (count == 0) break;  

            Node* start = prev->next;
            Node* next = end->next;

            reverse(start, next);   

            prev->next = end;      
            start->next = next;     

            prev = start;          

            if (count < k) break;    
        }

        return dummy.next;
    }

private:
    void reverse(Node* head, Node* stop) {
        Node* prev = stop;
        while (head != stop) {
            Node* nxt = head->next;
            head->next = prev;
            prev = head;
            head = nxt;
        }
    }
};
