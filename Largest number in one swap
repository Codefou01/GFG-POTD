Java :

class Solution {
    public String largestSwap(String s) {
        char[] arr = s.toCharArray();
        int n = arr.length;

        int[] last = new int[10];
        for (int i = 0; i < n; i++) {
            last[arr[i] - '0'] = i;
        }

      
        for (int i = 0; i < n; i++) {
      
            for (int d = 9; d > arr[i] - '0'; d--) {
                if (last[d] > i) {
      
                    char temp = arr[i];
                    arr[i] = arr[last[d]];
                    arr[last[d]] = temp;
                    return new String(arr);
                }
            }
        }
        
        return s; 
    }
}



C++ Code :

class Solution {
public:
    string largestSwap(string s) {
        int n = s.size();
        vector<int> last(10, -1);

        for (int i = 0; i < n; i++) {
            last[s[i] - '0'] = i;
        }

        for (int i = 0; i < n; i++) {
            for (int d = 9; d > s[i] - '0'; d--) {
                if (last[d] > i) {
                    swap(s[i], s[last[d]]);
                    return s;
                }
            }
        }
        return s;
    }
};
