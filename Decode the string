Java Code : 

class Solution {
    
    static String decodeString(String s) {
        Stack<Character> st = new Stack<>();
        
        for (int i = 0; i < s.length(); i++) {
            
            if (s.charAt(i) != ']') st.push(s.charAt(i)); 
            
            else {
                
                StringBuilder temp = new StringBuilder();
            
                while (!st.isEmpty() && st.peek() != '[') temp.append(st.pop());
                
                temp.reverse();
                st.pop(); 

                StringBuilder num = new StringBuilder();
                
                while (!st.isEmpty() && Character.isDigit(st.peek())) {
                    num.insert(0, st.pop());
                }
                
                int number = Integer.parseInt(num.toString()); 
                StringBuilder repeat = new StringBuilder();
                
                for (int j = 0; j < number; j++) repeat.append(temp);
                for (char c : repeat.toString().toCharArray()) st.push(c);
            }
        }

        StringBuilder res = new StringBuilder();
        while (!st.isEmpty())  res.append(st.pop());
        res.reverse();
        
        return res.toString();
    }
}


C++ Code : 

class Solution {
public:
    string decodedString(string &s) {   
        stack<char> st;
        
        for (char ch : s) {
            if (ch != ']') st.push(ch);
            else {
                
                string temp = "";
                while (!st.empty() && st.top() != '[') {
                    temp += st.top();
                    st.pop();
                }
                
                reverse(temp.begin(), temp.end());
                st.pop();
                string num = "";
                
                while (!st.empty() && isdigit(st.top())) {
                    num = st.top() + num;
                    st.pop();
                }
                
                int number = stoi(num);
                string repeat = "";
                for (int i = 0; i < number; i++) repeat += temp;
                for (char c : repeat) st.push(c);
            }
        }
        
        string res = "";
        while (!st.empty()) {
            res += st.top();
            st.pop();
        }
        
        reverse(res.begin(), res.end());
        return res;
    }
};
